FUNCTION_BLOCK aceleracion

VAR_INPUT
    s0 : REAL;
    s1 : REAL;
    s2 : REAL;  
    s3 : REAL;
    s4 : REAL;
    s5 : REAL; 
    s6 : REAL;
    s7 : REAL;
    s8 : REAL;
    sig : REAL;
END_VAR

VAR_OUTPUT
    vel : REAL;
    rot : REAL;
END_VAR




// sensores **************************************************************
FUZZIFY s0
//                      (distancia, pertenencia)
    TERM near   := (0,1) (0.5,0.5) (1,0.25) (1.5,0);
    TERM med    := (0.25,0) (0.75,1) (1.25,0) (1.5,0);
    TERM far    := (0,0) (1.5,1);
END_FUZZIFY

FUZZIFY s1
    TERM near   := (0,1) (0.5,0.5) (1,0.25) (1.5,0);
    TERM med    := (0.25,0) (0.75,1) (1.25,0) (1.5,0);
    TERM far    := (0,0) (1.5,1);
END_FUZZIFY

FUZZIFY s2
    TERM near   := (0,1) (0.5,0.5) (1,0.25) (1.5,0);
    TERM med    := (0.25,0) (0.75,1) (1.25,0) (1.5,0);
    TERM far    := (0,0) (1.5,1);
END_FUZZIFY

FUZZIFY s3
    TERM near   := (0,1) (0.5,0.5) (1,0.25) (1.5,0);
    TERM med    := (0.25,0) (0.75,1) (1.25,0) (1.5,0);
    TERM far    := (0,0) (1.5,1);
END_FUZZIFY

FUZZIFY s4
    TERM near   := (0,1) (0.5,0.5) (1,0.25) (1.5,0);
    TERM med    := (0.25,0) (0.75,1) (1.25,0) (1.5,0);
    TERM far    := (0,0) (1.5,1);
END_FUZZIFY

FUZZIFY s5
    TERM near   := (0,1) (0.5,0.5) (1,0.25) (1.5,0);
    TERM med    := (0.25,0) (0.75,1) (1.25,0) (1.5,0);
    TERM far    := (0,0) (1.5,1);
END_FUZZIFY

FUZZIFY s6
    TERM near   := (0,1) (0.5,0.5) (1,0.25) (1.5,0);
    TERM med    := (0.25,0) (0.75,1) (1.25,0) (1.5,0);
    TERM far    := (0,0) (1.5,1);
END_FUZZIFY

FUZZIFY s7
    TERM near   := (0,1) (0.5,0.5) (1,0.25) (1.5,0);
    TERM med    := (0.25,0) (0.75,1) (1.25,0) (1.5,0);
    TERM far    := (0,0) (1.5,1);
END_FUZZIFY

FUZZIFY s8
    TERM near   := (0,1) (0.5,0.5) (1,0.25) (1.5,0);
    TERM med    := (0.25,0) (0.75,1) (1.25,0) (1.5,0);
    TERM far    := (0,0) (1.5,1);
END_FUZZIFY
// *********************************************************************




//velocidad ************************************************************
DEFUZZIFY vel
    TERM fast   := (0,0) (2.5,1);
    TERM med    := (0,0) (1,1) (2.5,0);
    TERM slow   := (0,1) (2.5,0);
    // Use 'Center Of Gravity' defuzzification method
    METHOD : COG;
    // Default value is 1 (if no rule activates defuzzifier)
    DEFAULT := 1;
END_DEFUZZIFY
// *********************************************************************




//rotar ****************************************************************
//EJEMPLO de definición NO VINCULANTE
DEFUZZIFY rot
    TERM izqm   :=    (-10,0) (0,0) (10,1);
    TERM izq    :=    (-10,0)(-5,0) (0,1) (5,1) (10,0);
    TERM cen    :=    (-10,0) (-5,0) (-2.5,1) (2.5,1) (5,0);
    TERM der    :=    (-10,0) (-5,1) (0,1) (5,0) (10,0);
    TERM derm   :=    (-10,1) (0,0) (10,0);

    // Use 'Center Of Gravity' defuzzification method
    METHOD : COG;
    // Default value is 1 (if no rule activates defuzzifier)
    DEFAULT := 0;
END_DEFUZZIFY
// *********************************************************************




//sig ******************************************************************
FUZZIFY sig
//                (gradosGiro, pertenencia)
    TERM izqm   := (135,0) (180,1);
    TERM izq    := (23,0) (45,1) (90,1) (135,1) (150,0);
    TERM cen    := (-1,0) (0,1) (1,0);
    TERM der    := (-150,0) (-135,1) (-90,1) (-45,1) (-23,0);
    TERM derm   := (-180,1) (-135,0);
END_FUZZIFY
// *********************************************************************




// reglas  *************************************************************
RULEBLOCK No1
    // Use 'min' for 'and' (also implicit use 'max'
    // for 'or' to fulfill DeMorgan's Law)
    AND : PROD;
    // Use 'min' activation method
    ACT : MIN;
    // Use 'max' accumulation method
    ACCU : MAX;

    // velocidad
    RULE 1: IF s0 IS far THEN vel IS med;
    RULE 1: IF s0 IS med THEN vel IS med;
    RULE 1: IF s0 IS near THEN vel IS slow;
        // RULE 1: IF s0 IS far THEN vel IS fast; ## no funciona ##

    // rotación en función de asig
    RULE 2: IF sig IS izqm THEN rot IS izqm;
    RULE 2: IF sig IS izq THEN rot IS izq;
    RULE 2: IF sig IS cen THEN rot IS cen;
    RULE 2: IF sig IS der THEN rot IS der;
    RULE 2: IF sig IS derm THEN rot IS derm;
    

END_RULEBLOCK
// *********************************************************************


END_FUNCTION_BLOCK
